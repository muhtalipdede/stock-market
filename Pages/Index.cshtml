@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-4 mb-0">Finansal Takip</h1>
        <a href="/Prices" class="btn btn-outline-primary">Fiyat Listesine Git</a>
    </div>
    <div id="symbol-container" class="row g-3"></div>
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
// Alt/üst limitler localStorage'da tutulacak
const limits = JSON.parse(localStorage.getItem('limits') || '{}');
function saveLimits() { localStorage.setItem('limits', JSON.stringify(limits)); }
function showToast(message) {
    let toast = document.getElementById('limit-toast');
    if (!toast) {
        toast = document.createElement('div');
        toast.id = 'limit-toast';
        toast.className = 'toast align-items-center text-bg-primary border-0 show position-fixed bottom-0 end-0 m-3';
        toast.role = 'alert';
        toast.innerHTML = `<div class='d-flex'><div class='toast-body'></div><button type='button' class='btn-close btn-close-white me-2 m-auto' data-bs-dismiss='toast'></button></div>`;
        document.body.appendChild(toast);
    }
    toast.querySelector('.toast-body').textContent = message;
    toast.style.display = 'block';
    setTimeout(() => toast.style.display = 'none', 4000);
}
window.setLimits = function(symbol) {
    const min = parseFloat(document.getElementById(`min-${symbol}`).value);
    const max = parseFloat(document.getElementById(`max-${symbol}`).value);
    limits[symbol] = { min: isNaN(min) ? null : min, max: isNaN(max) ? null : max };
    saveLimits();
    showToast(`${symbol} için limitler kaydedildi.`);
};
function updatePriceUI(symbol, price) {
    const priceElement = document.getElementById(`price-${symbol}`);
    if (priceElement) priceElement.textContent = `Fiyat: ${price}`;
    const min = limits[symbol]?.min;
    const max = limits[symbol]?.max;
    if (min !== undefined && min !== null && price < min) showToast(`${symbol} fiyatı alt limitin altında! (${price} < ${min})`);
    if (max !== undefined && max !== null && price > max) showToast(`${symbol} fiyatı üst limitin üstünde! (${price} > ${max})`);
}
window.renderSymbolCards = function(symbols) {
    const container = document.getElementById('symbol-container');
    container.innerHTML = '';
    symbols.forEach(symbol => {
        const card = document.createElement('div');
        card.className = 'col-12 col-md-4';
        card.innerHTML = `
            <div class="card h-100 shadow-sm mb-2">
                <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <div id="price-${symbol}">Fiyat: -</div>
                    <div class="row g-2 align-items-center mt-2">
                        <div class="col-auto">
                            <input type="number" class="form-control" id="min-${symbol}" placeholder="Alt limit" value="${limits[symbol]?.min ?? ''}">
                        </div>
                        <div class="col-auto">
                            <input type="number" class="form-control" id="max-${symbol}" placeholder="Üst limit" value="${limits[symbol]?.max ?? ''}">
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-outline-primary" onclick="setLimits('${symbol}')">Limitleri Kaydet</button>
                        </div>
                    </div>
                    <div class="row g-2 align-items-center mt-2">
                        <div class="col-auto">
                            <button id="subscribe-${symbol}" class="btn btn-success" onclick="subscribeToSymbol('${symbol}')">Takip Et</button>
                        </div>
                        <div class="col-auto">
                            <button id="unsubscribe-${symbol}" class="btn btn-secondary" onclick="unsubscribeFromSymbol('${symbol}')">Takibi Bırak</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
};

let connection;
const followedSymbols = new Set();
window.subscribeToSymbol = function(symbol) {
    if (!followedSymbols.has(symbol)) {
        connection.invoke('Subscribe', symbol);
        followedSymbols.add(symbol);
        showToast(`${symbol} takibe alındı.`);
    }
};
window.unsubscribeFromSymbol = function(symbol) {
    if (followedSymbols.has(symbol)) {
        connection.invoke('Unsubscribe', symbol);
        followedSymbols.delete(symbol);
        showToast(`${symbol} takibi bırakıldı.`);
    }
};

window.addEventListener('DOMContentLoaded', () => {
    const defaultSymbols = ["USD/TRY", "BTC/USDT", "ETH/USDT", "XRP/USDT", "BIST100"];
    renderSymbolCards(defaultSymbols);
    connection = new signalR.HubConnectionBuilder()
        .withUrl('/priceHub')
        .build();
    connection.start().then(() => {
        console.log('PriceHub bağlantısı kuruldu');
    });
    connection.on('ReceivePriceUpdate', (symbol, price) => {
        updatePriceUI(symbol, price);
    });
});
</script>

